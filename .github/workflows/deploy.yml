name: Deploy Doc Sphere


on:
  pull_request:
    types: [closed]
    branches:
      - main


jobs:
  build-and-deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add remote host to known_hosts
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        echo "known_hosts:"
        cat ~/.ssh/known_hosts 

    - name: Copy entire project to VPS
      run: |
        rsync -avz --delete ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/deploys/docsphere \
          --exclude node_modules \
          --exclude .git \
          --exclude Front-End/node_modules

    - name: Make dir on VPS
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          mkdir -p /deploys/docsphere/Back-End/Keys && \
          mkdir -p /deploys/docsphere/Front-End
        "


    - name: Create keys.env on VPS
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          printf '%s' '${{ secrets.BACK_END_ENV_KEYS }}' > /deploys/docsphere/Back-End/Keys/keys.env
        "

    - name: Create .env on VPS
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          printf '%s' '${{ secrets.FRONT_END_ENV_KEYS }}' > /deploys/docsphere/Front-End/.env
        "

    - name: Create Firebase.json on VPS
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          echo '${{ secrets.FIREBASE_KEYS }}' | base64 --decode > /deploys/docsphere/Back-End/Keys/Firebase.json
        "

    - name: Deploy Docker Compose
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          cd /deploys/docsphere && \

          # --- Delet, Build, Tag e Push dos agentes ---
          docker rmi $(docker images -f "dangling=true" -q) && \

          docker rm -f frontend_docserver docserver_api_1 || true && \
          docker container prune && \
          docker compose up --build -d --no-deps frontend_docserver docserver_api_1 
        "
